services:
  postgres:
    image: postgres:16
    container_name: postgres
    tty: true
    stdin_open: true
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
      PGDATA: "/var/lib/postgresql/data/pgdata"
      TZ: ${TIMEZONE}
    volumes:
      - postgresdata:/var/lib/postgresql/data
    expose:
      - "5432"
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - main
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis/redis-stack:6.2.6-v17
    container_name: redis
    restart: unless-stopped
    tty: true
    stdin_open: true
    env_file:
      - ./.env
    environment:
      REDIS_ARGS: "--requirepass ${REDIS_PASSWORD}"
      TZ: ${TIMEZONE}
    networks:
      - main
    expose:
      - "6379"
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    build: ./images/nginx/
    container_name: nginx
    tty: true
    stdin_open: true
    ports:
      - "80:80"
      - "443:443"
    networks:
      - main
    environment:
      - TZ=${TIMEZONE}
    depends_on:
      - app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  worker-collector:
    build: ../Collector
    container_name: worker-collector
    command: python -m celery -A src worker --loglevel=info
    networks:
      - main
    environment:
      - TZ=${TIMEZONE}
    depends_on:
      - postgres
      - redis

  beat-collector:
    build: ../Collector
    container_name: beat-collector
    command: python -m celery -A src beat --loglevel=info
    networks:
      - main
    environment:
      - TZ=${TIMEZONE}
    depends_on:
      - postgres
      - redis

  flower:
    build: ../Collector
    container_name: flower
    command: python -m celery flower --port=5555 --persistent=True --max_tasks=200 --db=/app/celery/flower
    networks:
      - main
    environment:
      - TZ=${TIMEZONE}
    ports:
      - "127.0.0.1:5555:5555"
    expose:
        - "5555"
    volumes:
      - flower:/app/celery
    depends_on:
      - beat-collector
      - worker-collector

  worker-main:
    build: .
    container_name: worker-main
    command: python -m celery -A main.celery worker --loglevel=info
    networks:
      - main
    environment:
      - TZ=${TIMEZONE}
    depends_on:
      - postgres
      - redis
      - app

  beat-main:
    build: .
    container_name: beat-main
    command: python -m celery -A main.celery beat --loglevel=info
    networks:
      - main
    environment:
      - TZ=${TIMEZONE}
    depends_on:
      - postgres
      - redis
      - app

  app:
    build: .
    container_name: app
    command: gunicorn
    environment:
      - TZ=${TIMEZONE}
    depends_on:
      - postgres
      - redis
    networks:
      - main

networks:
  main:
    driver: bridge

volumes:
  postgresdata:
  redisdata:
  flower:
