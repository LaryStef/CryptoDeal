services:
  postgres:
    image: postgres:16
    container_name: postgres_container
    tty: true
    stdin_open: true
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - postgresdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"

  redis:
    image: redis/redis-stack:6.2.6-v17
    container_name: redis_container
    restart: unless-stopped
    tty: true
    stdin_open: true
    env_file:
      - ./.env
    environment:
      REDIS_ARGS: "--requirepass ${REDIS_PASSWORD}"
    networks:
      - default
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"
  
  nginx:
    build: ./images/nginx/
    container_name: nginx
    tty: true
    stdin_open: true
    ports:
      - "81:80"
    networks:
      - default
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.25"
          memory: "256M"
  
  worker-collector:
    build: ../CryptoDeal-collector
    container_name: worker-collector
    command: python -m celery -A src worker --loglevel=info
    depends_on:
      - postgres
      - redis
  
  beat-collector:
    build: ../CryptoDeal-collector
    container_name: beat-collector
    command: python -m celery -A src beat --loglevel=info
    depends_on:
      - postgres
      - redis

volumes:
  postgresdata:
  redisdata:
